---
// src/layouts/MainLayout.astro
const {
  title,
  description = "Hirenest - Find jobs, find candidates, find talent, find opportunities, find employers, find hires",
} = Astro.props;

import "../styles/global.css";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import { BUILD_VERSION } from "../utils/version";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="build-version" content={BUILD_VERSION} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicon/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/favicon/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/favicon/favicon-16x16.png"
    />
    <link rel="manifest" href="/favicon/site.webmanifest" />
    <title>{title}</title>
  </head>
  <body>
    <header>
      <Navbar />
    </header>
    <main>
      <slot />
    </main>
    <footer>
      <Footer />
    </footer>

    <script define:vars={{ buildVersion: BUILD_VERSION }}>
      // Store current page load timestamp
      const currentVersion = buildVersion;
      const lastVersion = localStorage.getItem("site-version");

      // Check version on page load
      if (lastVersion !== currentVersion) {
        localStorage.setItem("site-version", currentVersion);

        // Clear browser cache for assets
        if (lastVersion) {
          caches.keys().then((names) => {
            names.forEach((name) => {
              caches.delete(name);
            });
            // Hard reload after cache clear
            window.location.reload(true);
          });
        }
      }

      // Periodically check for updates (optional)
      setInterval(() => {
        fetch(window.location.href, { cache: "no-store" })
          .then((response) => response.text())
          .then((html) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, "text/html");
            const newVersion = doc.querySelector(
              'meta[name="build-version"]'
            )?.content;

            if (newVersion && newVersion !== currentVersion) {
              localStorage.setItem("site-version", newVersion);
              window.location.reload(true);
            }
          });
      }, 300000); // Check every 5 minutes
    </script>
  </body>
</html>
